package main

import (
	"bot_sme_loan/pkg"
	"bytes"
	"fmt"
	"log"

	"github.com/PuerkitoBio/goquery"
)

func main() {
	// Define the request URL and JSON data
	url := "https://app.bot.or.th/1213/MCPD/ProductApp/SME/CompareProductList"
	initialpayLoad := `{"ProductIdList":"3867,3872,3873,3883,2926,1655,2935,2937,2957,2918,2919,2942,2951,2929,2928,2950,931,2939,2958,3870,3871,1778,1783,1784,1820,1805,1770,1772,1765,1803,1812,1791,1793,1761,1763,1819,1762,1813,1786,1788,1773,1774,1808,1804,1785,1771,1789,1787,1779,1806,1818,1795,1799,1166,1169,1153,3887,165,1602,1597,3137,3138,3130,3127,3136,2895,2896,2892,2897,2894,2899,2893,2898,1598,1131,1087,1092,1171,1108,1110,1094,3886,1111,1129,1071,1081,2033,1775,1764,2531,1777,1768,1769,1107,1154,1148,1134,1119,1121,1090,1089,1074,1080,1136,1115,1117,1168,1159,1161,1105,1811,899,905,903,900,901,904,902,1077,1103,1125,1969,1970,3131,3757,421,420,419,422,418,3747,2944,2921,3746,1776,1068,1083,3129,3751,3753,3754,3756,3755,2920,4117,4079,4083,4066,4146,4135,4097,3105,3107,3106,3108,1165,1170,1173,1084,1095,1097,1069,1102,1088,1082,1126,1127,1128,1124,1120,1118,1116,1130,1139,1140,1141,1133,1144,1073,1654,2532,1098,1093,1085,1091,1104,1106,1072,1079,1145,1143,1137,1149,1150,1151,1152,1155,1162,1160,1167,1157,1123,1109,1112,1114,3126,3745,3124,3133,3128,1656,1657,1658,1659,2927,2912,3376,3378,3380,4085,4124,4080,4089,2930,2913,1814,1815,1780,2931,2914,2932,2915,4143,4098,4123,4140,662,1790,1767,2727,2728,1078,1101,1164,1135,3758,3114,4110,3121,1822,2952,1801,1810,1816,1821,1797,1807,1781,1792,4126,1809,4072,4086,4137,599,602,601,598,4142,3381,1802,3116,3119,3110,3115,1798,1660,2947,2940,2916,1817,2956,1796,1146,1100,1076,1070,1132,1156,1782,3134,4145,4087,1800,3123,4070,4114,1592,3120,4071,4100,1075,1086,1099,1142,1163,1172,4129,2730,1138,3885,2917,2723,2530,1794,1096,3743,2948,3132,3125,2911,3377,2954,3868,3750,1766,603,600,2933,2953,3749,4132,2941,2924,3759,2949,3122,2925,2923,2922,3379,2533,4063,2934,3135,4103,4138,4122","Page":1,"Limit":3}`
	// initialpayLoad := `{"ProductIdList":"3867,3872,3873,3883,2926,1655,2935,2937,2957,2918,2919,2942,2951,2929,2928,2950,931,2939,2958,3870","Page":1,"Limit":3}`

	firstPageBody, err := pkg.FetchHTML(url, initialpayLoad)
	if err != nil {
		log.Fatalf("Error fetching first page: %v", err)
	}

	totalPages := pkg.DetermineTotalPage(firstPageBody)
	if totalPages == 0 {
		log.Fatalf("could not determine the total number of pages")
	}

	var products []pkg.Product

	for page := 1; page <= totalPages; page++ {
		fmt.Printf("Processing page: %d/%d\n", page, totalPages)
		payload := fmt.Sprintf(`{"ProductIdList":"3867,3872,3873,3883,2926,1655,2935,2937,2957,2918,2919,2942,2951,2929,2928,2950,931,2939,2958,3870,3871,1778,1783,1784,1820,1805,1770,1772,1765,1803,1812,1791,1793,1761,1763,1819,1762,1813,1786,1788,1773,1774,1808,1804,1785,1771,1789,1787,1779,1806,1818,1795,1799,1166,1169,1153,3887,165,1602,1597,3137,3138,3130,3127,3136,2895,2896,2892,2897,2894,2899,2893,2898,1598,1131,1087,1092,1171,1108,1110,1094,3886,1111,1129,1071,1081,2033,1775,1764,2531,1777,1768,1769,1107,1154,1148,1134,1119,1121,1090,1089,1074,1080,1136,1115,1117,1168,1159,1161,1105,1811,899,905,903,900,901,904,902,1077,1103,1125,1969,1970,3131,3757,421,420,419,422,418,3747,2944,2921,3746,1776,1068,1083,3129,3751,3753,3754,3756,3755,2920,4117,4079,4083,4066,4146,4135,4097,3105,3107,3106,3108,1165,1170,1173,1084,1095,1097,1069,1102,1088,1082,1126,1127,1128,1124,1120,1118,1116,1130,1139,1140,1141,1133,1144,1073,1654,2532,1098,1093,1085,1091,1104,1106,1072,1079,1145,1143,1137,1149,1150,1151,1152,1155,1162,1160,1167,1157,1123,1109,1112,1114,3126,3745,3124,3133,3128,1656,1657,1658,1659,2927,2912,3376,3378,3380,4085,4124,4080,4089,2930,2913,1814,1815,1780,2931,2914,2932,2915,4143,4098,4123,4140,662,1790,1767,2727,2728,1078,1101,1164,1135,3758,3114,4110,3121,1822,2952,1801,1810,1816,1821,1797,1807,1781,1792,4126,1809,4072,4086,4137,599,602,601,598,4142,3381,1802,3116,3119,3110,3115,1798,1660,2947,2940,2916,1817,2956,1796,1146,1100,1076,1070,1132,1156,1782,3134,4145,4087,1800,3123,4070,4114,1592,3120,4071,4100,1075,1086,1099,1142,1163,1172,4129,2730,1138,3885,2917,2723,2530,1794,1096,3743,2948,3132,3125,2911,3377,2954,3868,3750,1766,603,600,2933,2953,3749,4132,2941,2924,3759,2949,3122,2925,2923,2922,3379,2533,4063,2934,3135,4103,4138,4122","Page":%d,"Limit":3}`, page)

		pageBody, err := pkg.FetchHTML(url, payload)
		if err != nil {
			log.Printf("Error fetching data for page %d: %v", page, err)
			continue
		}

		// Convert pageBody to *goquery.Document
		doc, err := goquery.NewDocumentFromReader(bytes.NewReader(pageBody))
		if err != nil {
			log.Printf("Error parsing HTML for page %d: %v", page, err)
			continue
		}

		productsPage := pkg.ExtractProducts(doc, 1)
		products = append(products, productsPage...)
	}

	err = pkg.SaveProductToFile(products, "sme_loan.json")
	if err != nil {
		log.Fatalf("Error saving products to file: %v", err)
	}

	fmt.Println("Data successfully saved to sme_loan.json")
}
